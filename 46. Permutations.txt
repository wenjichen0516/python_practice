 public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtracking(res,nums,new ArrayList());
        return res;
    }
    public static void backtracking(List<List<Integer>> res, int[] nums, List l){
        if(l.size()==nums.length){
            res.add(new ArrayList<>(l));
            return;
        }

        for (int i = 0; i < nums.length ; i++) {
            if(l.contains((Integer)nums[i]))    //防止相同的元素再次添加
                continue;
            l.add(nums[i]);
            backtracking(res,nums,l);
            l.remove((Integer)nums[i]);
        }
    }


from itertools import permutations
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
	return list(permutations(nums))

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
	visited = [0] * len(nums)
	self.res = 0

	self.dfs([])

	return self.res
	
    def dfs(path):
	if len(path) == len(nums):
	    self.res.append(path)
	else:
	    for i in range(len(nums)):
		if not visited[i]:
		    visited[i] = 1
		    self.dfs(path + [nums[i]])
		    visited[i] = 0