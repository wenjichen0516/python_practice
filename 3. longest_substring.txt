Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        max = 0
        if s is not None:
            if len(s) == 0:
                return 0
            else:
                for i in range(len(s)):
                    string = s[i:]

                    dict = {}

                    for j in range((len(string))):
                        max_temp = j + 1
                        substring,character = string[1:],string[:1]

                        string = substring

                        if character in dict.keys():
                            max_temp = j
                            break

                        dict.update({character:1})

                    if max < max_temp:
                        max = max_temp
        return max



class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0: return 0
        
        start = maxLength = 0
        used = {}
        
        for i in range(len(s)):
            if s[i] in used and start <= used[s[i]]:
                start = used[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)
            
            used[s[i]] = i
        
        return maxLength

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0 || s == null) return 0;
        
        Map<Character,Integer> m = new HashMap<Character,Integer>();
        int len = 0, start = 0;
        
        for(int i = 0; i < s.length(); i ++){
            if(m.containsKey(s.charAt(i)) && start <= m.get(s.charAt(i))){
                start = m.get(s.charAt(i)) + 1;
            }
            else{
                len = Math.max(len, i - start + 1);
            }
            m.put(s.charAt(i),i);
        }
        
        return len;
    }
}